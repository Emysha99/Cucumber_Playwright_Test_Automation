name: Combined UI and API Testing

on:
  push:
    branches: [ "dev-2" ]
  pull_request:
    branches: [ "dev-2" ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  ui-testing:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: UI-Testing

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: 'UI-Testing/yarn.lock'

      - name: Install dependencies
        run: yarn install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install xvfb
        run: sudo apt-get install -y xvfb

      - name: Run Playwright tests
        run: xvfb-run --auto-servernum yarn test
        continue-on-error: true
        env:
          CI: true

      # Don't generate report here, just save results
      - name: Upload UI Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-allure-results
          path: UI-Testing/allure-results
          retention-days: 30

  api-testing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: maven

      - name: Create Allure Directories
        working-directory: API_Testing
        run: |
          mkdir -p target/allure-results
          chmod -R 777 target
        continue-on-error: true

      - name: Build with Maven
        working-directory: API_Testing
        run: mvn clean compile -DskipTests
        continue-on-error: true

      - name: Start Application
        working-directory: API_Testing
        run: |
          cd libs
          java -Dserver.port=7081 -jar demo-0.0.1-SNAPSHOT.jar &
          echo "Waiting for application to start..."
          USERNAME="admin"
          PASSWORD="password"
          AUTH=$(echo -n "$USERNAME:$PASSWORD" | base64)
          timeout 60 bash -c "while [[ \"\$(curl -s -o /dev/null -w '%{http_code}' -H \"Authorization: Basic $AUTH\" 127.0.0.1:7081/api/books)\" != \"200\" ]]; do sleep 5; done" || true
          echo "Application is running!"
          cd ..
        continue-on-error: true

      - name: Run API Tests
        id: api-tests
        working-directory: API_Testing
        run: mvn test
        continue-on-error: true

      # Don't generate report here, just save results
      - name: Upload API Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-allure-results
          path: API_Testing/target/allure-results
          retention-days: 30

  generate-report:
    needs: [ui-testing, api-testing]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Allure CLI
        run: |
          curl -o allure-2.24.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz -C /tmp
          sudo ln -s /tmp/allure-2.24.0/bin/allure /usr/local/bin/allure

      - name: Create Directories
        run: |
          mkdir -p allure-results
          mkdir -p allure-report
          mkdir -p .allure

      # Copy any necessary Allure configurations
      - name: Copy Allure Configs
        run: |
          if [ -f "API_Testing/src/test/resources/allure.properties" ]; then
            cp API_Testing/src/test/resources/allure.properties .allure/
          fi
          if [ -f "UI-Testing/allure.properties" ]; then
            cp UI-Testing/allure.properties .allure/
          fi

      - name: Download UI Results
        uses: actions/download-artifact@v3
        with:
          name: ui-allure-results
          path: allure-results/ui

      - name: Download API Results
        uses: actions/download-artifact@v3
        with:
          name: api-allure-results
          path: allure-results/api

      - name: Debug Directory Structure
        run: |
          echo "Current directory structure:"
          ls -R allure-results/
          echo "UI Results:"
          ls -la allure-results/ui || echo "No UI results"
          echo "API Results:"
          ls -la allure-results/api || echo "No API results"

      - name: Merge Results
        run: |
          mkdir -p allure-results/merged
          cp -r allure-results/ui/* allure-results/merged/ || true
          cp -r allure-results/api/* allure-results/merged/ || true

      - name: Generate Combined Report
        run: |
          allure generate allure-results/merged -o allure-report --clean
          touch allure-report/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        if: always()

      - name: Print Test Status
        if: always()
        run: |
          echo "Test execution completed"
          echo "Combined Allure report should be available at: ${{ steps.deployment.outputs.page_url }}"
